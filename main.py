import asyncio
import logging
import sys
import os
import aiohttp
from dotenv import load_dotenv
import json
import random

from aiogram import F, Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

#  –ó–∞–≥—Ä—É–∑–∫–∞ JSON —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
with open("question.json", "r", encoding="utf-8") as f:
    data = json.load(f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑
load_dotenv()
TOKEN = os.getenv("TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
print("WEATHER_API_KEY:", WEATHER_API_KEY)
TMDB_API_KEY = os.getenv("TMDB_API_KEY")

def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–º–æ—â—å")],
            [KeyboardButton(text="–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ")],
            [KeyboardButton(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ç–∏–∫–∞")],
            [KeyboardButton(text="–ü–æ–≥–æ–¥–∞")],
            [KeyboardButton(text="–ò–≥—Ä–∞ —É–≥–∞–¥–∞–π")],
            [KeyboardButton(text="–§–∏–ª—å–º –Ω–∞ –≤–µ—á–µ—Ä")]
        ],
        resize_keyboard=True
    )

def back_button():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
@dp.message(F.text == "–ü–æ–º–æ—â—å")
async def help_handler(message: Message):
    help_text = (
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –≤—ã–¥–∞—é —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.\n"
        "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ç–∏–∫–∞ ‚Äî –ø—Ä–∏—à–ª—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–∏–ª–æ–≥–æ –∫–æ—Ç–∏–∫–∞.\n"
        "–ü–æ–≥–æ–¥–∞ ‚Äî –ø–æ–∫–∞–∂—É –ø–æ–≥–æ–¥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ.\n"
        "–ò–≥—Ä–∞ —É–≥–∞–¥–∞–π ‚Äî –º–∞–ª–µ–Ω—å–∫–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.\n"
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "–§–∏–ª—å–º –Ω–∞ –≤–µ—á–µ—Ä - –ø–æ–¥–±–µ—Ä–µ—Ç –≤–∞–º —Ñ–∏–ª—å–º –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n"
    )
    await message.answer(help_text, reply_markup=back_button())

@dp.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
        reply_markup=main_menu()
    )


class QuizStates(StatesGroup):
    waiting_for_answer = State()


@dp.message(F.text == "–ò–≥—Ä–∞ —É–≥–∞–¥–∞–π")
async def start_quiz(message: Message, state: FSMContext):
    await state.set_state(QuizStates.waiting_for_answer)
    await state.update_data(current_question=0)
    await send_question(message, state)


async def send_question(message: Message, state: FSMContext):
    user_data = await state.get_data()
    q_index = user_data.get("current_question", 0)

    if q_index >= len(data):
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã", reply_markup=back_button())
        await state.clear()
        return

    question = data[q_index]["question"]
    options = data[q_index]["options"]

    keyboard_rows = []
    for i in range(0, len(options), 2):
        row = [KeyboardButton(text=opt) for opt in options[i:i + 2]]
        keyboard_rows.append(row)
    keyboard_rows.append([KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")])

    kb = ReplyKeyboardMarkup(keyboard=keyboard_rows, resize_keyboard=True)

    await message.answer(f"{question}", reply_markup=kb)


@dp.message(QuizStates.waiting_for_answer)
async def handle_answer(message: Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await go_to_menu(message, state)
        return

    user_data = await state.get_data()
    q_index = user_data.get("current_question", 0)
    correct_answer = data[q_index]["answer"]

    if message.text == correct_answer:
        await message.answer("–í–µ—Ä–Ω–æ!")
        await state.update_data(current_question=q_index + 1)
        await send_question(message, state)
    else:
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}",
            reply_markup=back_button()
        )
        await state.clear()


@dp.message(F.text == "–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ")
async def random_number(message: Message):
    await message.answer(f"–¢–≤–æ–µ —á–∏—Å–ª–æ: {random.randint(1, 100)}", reply_markup=back_button())



@dp.message(F.text == "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ç–∏–∫–∞")
async def generation_img(message: Message):
    url = "https://api.thecatapi.com/v1/images/search"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                image_url = data[0]["url"]
                await message.answer_photo(photo=image_url, caption="–í–æ—Ç —Ç–≤–æ–π –∫–æ—Ç–∏–∫", reply_markup=back_button())
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞", reply_markup=back_button())


class WeatherStates(StatesGroup):
    waiting_for_city = State()


async def get_coordinates(city: str):
    url = f"https://nominatim.openstreetmap.org/search?q={city}&format=json&limit=1"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                if data:
                    return data[0]["lat"], data[0]["lon"]
    return None, None


async def get_weather_yandex(lat, lon):
    url = f"https://api.weather.yandex.ru/v2/forecast?lat={lat}&lon={lon}"
    headers = {"X-Yandex-API-Key": WEATHER_API_KEY}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            if resp.status == 200:
                data = await resp.json()
                fact = data["fact"]
                desc = {
                    "clear": "–Ø—Å–Ω–æ",
                    "partly-cloudy": "–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ",
                    "cloudy": "–û–±–ª–∞—á–Ω–æ",
                    "overcast": "–ü–∞—Å–º—É—Ä–Ω–æ",
                    "drizzle": "–ú–æ—Ä–æ—Å—å",
                    "light-rain": "–õ—ë–≥–∫–∏–π –¥–æ–∂–¥—å",
                    "rain": "–î–æ–∂–¥—å",
                    "heavy-rain": "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
                    "snow": "–°–Ω–µ–≥",
                    "thunderstorm": "–ì—Ä–æ–∑–∞"
                }.get(fact["condition"], fact["condition"])
                return (
                    f"{desc}\n"
                    f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {fact['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {fact['feels_like']}¬∞C)\n"
                    f"–í–µ—Ç–µ—Ä: {fact['wind_speed']} –º/—Å\n"
                    f"–î–∞–≤–ª–µ–Ω–∏–µ: {fact['pressure_mm']} –º–º —Ä—Ç. —Å—Ç.\n"
                    f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {fact['humidity']}%"
                )
            else:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É"


@dp.message(F.text == "–ü–æ–≥–æ–¥–∞")
async def ask_city(message: Message, state: FSMContext):
    await state.set_state(WeatherStates.waiting_for_city)
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=back_button())


@dp.message(WeatherStates.waiting_for_city)
async def handle_city(message: Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await go_to_menu(message, state)
        return

    city = message.text.strip()
    lat, lon = await get_coordinates(city)
    if not lat:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞", reply_markup=back_button())
        return

    weather_info = await get_weather_yandex(lat, lon)
    await message.answer(f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\n\n{weather_info}", reply_markup=back_button())
    await state.clear()
    
@dp.message(F.text == "–§–∏–ª—å–º –Ω–∞ –≤–µ—á–µ—Ä")
async def movie_of_the_evening(message: Message):
    url = f"https://api.themoviedb.org/3/movie/popular?api_key={TMDB_API_KEY}&language=ru-RU&page={random.randint(1, 10)}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                if "results" in data and data["results"]:
                    film = random.choice(data["results"])
                    title = film.get("title")
                    overview = film.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    poster_path = film.get("poster_path")
                    poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else None

                    if poster_url:
                        await message.answer_photo(
                            photo=poster_url,
                            caption=f"{title}\n\n{overview}",
                            reply_markup=back_button()
                        )
                    else:
                        await message.answer(f"üé¨ {title}\n\n{overview}", reply_markup=back_button())
                else:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º", reply_markup=back_button())
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞", reply_markup=back_button())


@dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def go_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("<--- –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(), parse_mode=None)
dp.message.register(go_to_menu, F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")

async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())